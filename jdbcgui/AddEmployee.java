package jdbcgui;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.JOptionPane;


/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author wissam
 */
public class AddEmployee extends javax.swing.JFrame {

    /**
     * Creates new form AddEmployee
     */
    myDBCon dbCon;
    ResultSet rs;

    public AddEmployee() {
        initComponents();
        this.setLocationRelativeTo(null); // center form in screen 
        // set all error labels to invisible
        lblSSNError.setVisible(false);
        lblEnameError.setVisible(false);
        lblJobError.setVisible(false);
        lblHireError.setVisible(false);
        lblPhonenoError.setVisible(false);
        lblSalaryError.setVisible(false);
        lblGenderError.setVisible(false);
        lblBirthdateError.setVisible(false);
        lblHIDError.setVisible(false);

        try {//populate hospital ID and  combo boxes
            dbCon = new myDBCon();
            rs = dbCon.executeStatement("SELECT ID FROM Hospital ORDER BY ID ASC");
            while (rs.next()) {
                cmbHID.addItem(rs.getString("ID"));
            }
            rs.close();
            // get and populate valid department numbers 
            cmbGender.addItem("MALE"); 
            cmbGender.addItem("FEMALE");
        } catch (SQLException e) {
            System.out.println(e);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jSSN = new javax.swing.JLabel();
        jEname = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jH_ID = new javax.swing.JLabel();
        jHireDate = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jSalary = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        txtSSN = new javax.swing.JTextField();
        txtEname = new javax.swing.JTextField();
        txtSalary = new javax.swing.JTextField();
        cmbHID = new javax.swing.JComboBox<>();
        cmbGender = new javax.swing.JComboBox<>();
        btnAddNewEmp = new javax.swing.JButton();
        ftxtHiredate = new javax.swing.JFormattedTextField();
        lblSSNError = new javax.swing.JLabel();
        lblJobError = new javax.swing.JLabel();
        lblEnameError = new javax.swing.JLabel();
        lblHireError = new javax.swing.JLabel();
        lblPhonenoError = new javax.swing.JLabel();
        lblSalaryError = new javax.swing.JLabel();
        lblBirthdateError = new javax.swing.JLabel();
        ftxtBirthdate = new javax.swing.JFormattedTextField();
        jBirthDate = new javax.swing.JLabel();
        lblGenderError = new javax.swing.JLabel();
        lblHIDError = new javax.swing.JLabel();
        txtJob = new javax.swing.JTextField();
        txtPhoneno = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Add New Employee");
        setResizable(false);

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 36)); // NOI18N
        jLabel1.setText("Add New Employee");

        jSSN.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jSSN.setText("SSN:");

        jEname.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jEname.setText("ENAME:");

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel4.setText("JOB:");

        jH_ID.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jH_ID.setText("Hosipital ID:");

        jHireDate.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jHireDate.setText("Hire Date:");

        jLabel7.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel7.setText("Phone Number:");

        jSalary.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jSalary.setText("Salary:");

        jLabel9.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel9.setText("Gender:");

        txtSSN.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        txtSSN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtSSNActionPerformed(evt);
            }
        });

        txtEname.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        txtEname.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtEnameActionPerformed(evt);
            }
        });

        txtSalary.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        txtSalary.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtSalaryActionPerformed(evt);
            }
        });

        cmbHID.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        cmbHID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbHIDActionPerformed(evt);
            }
        });

        cmbGender.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N

        btnAddNewEmp.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        btnAddNewEmp.setText("Add New");
        btnAddNewEmp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddNewEmpActionPerformed(evt);
            }
        });

        ftxtHiredate.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.DateFormatter(new java.text.SimpleDateFormat("dd-MMM-yyyy"))));
        ftxtHiredate.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        ftxtHiredate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ftxtHiredateActionPerformed(evt);
            }
        });

        lblSSNError.setFont(new java.awt.Font("Tahoma", 2, 18)); // NOI18N
        lblSSNError.setForeground(new java.awt.Color(255, 0, 0));
        lblSSNError.setText("error label");

        lblJobError.setFont(new java.awt.Font("Tahoma", 2, 18)); // NOI18N
        lblJobError.setForeground(new java.awt.Color(255, 0, 0));
        lblJobError.setText("error label");

        lblEnameError.setFont(new java.awt.Font("Tahoma", 2, 18)); // NOI18N
        lblEnameError.setForeground(new java.awt.Color(255, 0, 0));
        lblEnameError.setText("error label");

        lblHireError.setFont(new java.awt.Font("Tahoma", 2, 18)); // NOI18N
        lblHireError.setForeground(new java.awt.Color(255, 0, 0));
        lblHireError.setText("error label");

        lblPhonenoError.setFont(new java.awt.Font("Tahoma", 2, 18)); // NOI18N
        lblPhonenoError.setForeground(new java.awt.Color(255, 0, 0));
        lblPhonenoError.setText("error label");

        lblSalaryError.setFont(new java.awt.Font("Tahoma", 2, 18)); // NOI18N
        lblSalaryError.setForeground(new java.awt.Color(255, 0, 0));
        lblSalaryError.setText("error label");

        lblBirthdateError.setFont(new java.awt.Font("Tahoma", 2, 18)); // NOI18N
        lblBirthdateError.setForeground(new java.awt.Color(255, 0, 0));
        lblBirthdateError.setText("error label");

        ftxtBirthdate.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.DateFormatter(new java.text.SimpleDateFormat("dd-MMM-yyyy"))));
        ftxtBirthdate.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        ftxtBirthdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ftxtBirthdateActionPerformed(evt);
            }
        });

        jBirthDate.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jBirthDate.setText("Birth Date:");

        lblGenderError.setFont(new java.awt.Font("Tahoma", 2, 18)); // NOI18N
        lblGenderError.setForeground(new java.awt.Color(255, 0, 0));
        lblGenderError.setText("error label");

        lblHIDError.setFont(new java.awt.Font("Tahoma", 2, 18)); // NOI18N
        lblHIDError.setForeground(new java.awt.Color(255, 0, 0));
        lblHIDError.setText("error label");

        txtJob.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        txtJob.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtJobActionPerformed(evt);
            }
        });

        txtPhoneno.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        txtPhoneno.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtPhonenoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(0, 100, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jEname)
                    .addComponent(jSSN)
                    .addComponent(jLabel4)
                    .addComponent(jH_ID)
                    .addComponent(jHireDate)
                    .addComponent(jSalary)
                    .addComponent(jLabel9)
                    .addComponent(jLabel7)
                    .addComponent(jBirthDate))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(txtJob)
                                .addComponent(txtEname, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 200, Short.MAX_VALUE)
                                .addComponent(txtSalary, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 200, Short.MAX_VALUE)
                                .addComponent(ftxtHiredate, javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                    .addGap(21, 21, 21)
                                    .addComponent(btnAddNewEmp)))
                            .addComponent(txtPhoneno, javax.swing.GroupLayout.DEFAULT_SIZE, 202, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblEnameError, javax.swing.GroupLayout.PREFERRED_SIZE, 233, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lblHireError, javax.swing.GroupLayout.PREFERRED_SIZE, 237, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lblSalaryError, javax.swing.GroupLayout.PREFERRED_SIZE, 218, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lblPhonenoError, javax.swing.GroupLayout.PREFERRED_SIZE, 230, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(7, 7, 7))
                            .addComponent(lblJobError, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(cmbHID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblHIDError, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(ftxtBirthdate, javax.swing.GroupLayout.PREFERRED_SIZE, 206, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblBirthdateError, javax.swing.GroupLayout.DEFAULT_SIZE, 248, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(txtSSN, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lblSSNError, javax.swing.GroupLayout.PREFERRED_SIZE, 325, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(cmbGender, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lblGenderError, javax.swing.GroupLayout.PREFERRED_SIZE, 331, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 29, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(119, 119, 119)
                .addComponent(jLabel1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel1)
                .addGap(38, 38, 38)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jSSN)
                    .addComponent(txtSSN, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblSSNError))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jEname)
                    .addComponent(txtEname, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblEnameError))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(lblJobError)
                    .addComponent(txtJob, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jH_ID)
                    .addComponent(cmbHID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblHIDError))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblHireError, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jHireDate)
                        .addComponent(ftxtHiredate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jBirthDate)
                    .addComponent(ftxtBirthdate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblBirthdateError))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jSalary)
                    .addComponent(txtSalary, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblSalaryError))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel9)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(cmbGender, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(lblGenderError)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel7)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(lblPhonenoError)
                        .addComponent(txtPhoneno, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 55, Short.MAX_VALUE)
                .addComponent(btnAddNewEmp)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    // verify valid entry of integer values
    public boolean isInteger(String s) {
        try {
            Integer.parseInt(s);
            return true;
        } catch (NumberFormatException ex) {
            return false;
        }
    }

    // verify valid entry of double values
    public boolean isDouble(String s) {
        try {
            Double.parseDouble(s);
            return true;
        } catch (NumberFormatException ex) {
            return false;
        }
    }
    

    void clearErrorLabels() { // clear all labels used to display error messages 
        lblSSNError.setText("");
        lblSSNError.setVisible(false);
        lblEnameError.setText("");
        lblEnameError.setVisible(false);
        lblJobError.setText("");
        lblJobError.setVisible(false);
        lblHireError.setText("");
        lblHireError.setVisible(false);
        lblPhonenoError.setText("");
        lblPhonenoError.setVisible(false);
        lblSalaryError.setText("");
        lblSalaryError.setVisible(false);
        lblGenderError.setText("");
        lblGenderError.setVisible(false);
        lblBirthdateError.setText("");
        lblBirthdateError.setVisible(false);
    }

    // validate all user entry before sending new employee details to DB
    boolean isValidData() {
        clearErrorLabels();
        boolean result = true; // assume all details are true, set to false if otherwise 
        // you need to check format deails and make sure they are consistent with DB 
        if (txtSSN.getText().trim().isEmpty() || !isInteger(txtSSN.getText().trim()) || txtSSN.getText().trim().length() != 5) {
            if (txtSSN.getText().trim().isEmpty()) {
                lblSSNError.setText("Invalid. Cannot be empty.");
            } else if (!isInteger(txtSSN.getText().trim())) {
                lblSSNError.setText("Invalid. Must be integer.");
            } else if (txtSSN.getText().trim().length() != 5) {
                lblSSNError.setText("Invalid. Must be 5 integers.");
            }
            lblSSNError.setVisible(true);
            result = false;
        }

        if (txtEname.getText().trim().isEmpty() || (txtEname.getText().trim().length() > 9)) {
            if (txtEname.getText().trim().isEmpty()) {
                lblEnameError.setText("Invalid. Cannot be empty.");
            } else if ((txtEname.getText().trim().length() > 9)) {
                lblEnameError.setText("Invalid. Must be < 10 chars.");
            }
            lblEnameError.setVisible(true);
            result = false;
        }

        if (txtJob.getText().trim().isEmpty() || (txtJob.getText().trim().length() > 9)) {
            if (txtJob.getText().trim().isEmpty()) {
                lblJobError.setText("Invalid. Cannot be empty.");
            } else if (txtJob.getText().trim().length() > 9) {
                lblJobError.setText("Invalid. Must be < 10 chars.");
            }
            lblJobError.setVisible(true);
            result = false;
        }

        if (ftxtHiredate.getText().trim().isEmpty()) {
            lblHireError.setText("Invalid. Cannot be empty.");
            lblHireError.setVisible(true);
            result = false;
        }

        if (txtPhoneno.getText().trim().isEmpty()) {
            if (txtPhoneno.getText().trim().isEmpty()) {
                lblPhonenoError.setText("Invalid. Cannot be empty.");
            }
            lblPhonenoError.setVisible(true);
            result = false;
        }

        if (txtSalary.getText().trim().isEmpty() || !(isDouble(txtSalary.getText().trim()) || isInteger(txtSalary.getText().trim()))) {
            if (txtSalary.getText().trim().isEmpty()) {
                lblSalaryError.setText("Invalid. Cannot be empty.");
            } else if (!(isDouble(txtSalary.getText().trim()) || isInteger(txtSalary.getText().trim()))) {
                lblSalaryError.setText("Invalid. Must be double");
            }
            lblSalaryError.setVisible(true);
            result = false;
        }
        
        if(!isValidPhoneNumber(txtPhoneno.getText().trim())) {
            lblPhonenoError.setText("Form Should be xxx-xxx-xxxx");
            lblPhonenoError.setVisible(true);
            result = false;
        }

        return result;
    }

    void clearInputBoxes() { // clear for every new entry 
        //txtSSN.setText("");
        txtEname.setText("");
        txtJob.setText("");
        ftxtHiredate.setText("");
        ftxtBirthdate.setText("");
        txtSalary.setText("");
        txtPhoneno.setText("");
        cmbGender.setSelectedIndex(0);
        cmbHID.setSelectedIndex(0);
    }

    private boolean isDuplicate(int ssn) throws SQLException {
        boolean isduplicate = false;
        String stmtSQL = "SELECT ssn FROM employeez WHERE ssn = " + ssn;
        rs = dbCon.executeStatement(stmtSQL);
        // isBeforeFirst() returns false if there are no data in the resultset
        isduplicate = rs.isBeforeFirst();

        return isduplicate;
    }
    private void btnAddNewEmpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddNewEmpActionPerformed
        // TODO add your handling code here:

        try {
            /*
                * you need also to verify that the empno is unique and not duplicate 
                  
                *
             */
            char gender;
            if (cmbGender.getSelectedItem().toString() == "MALE")
                gender = 'M';
            else
                gender = 'F';
            
            if (isValidData() && !isDuplicate(Integer.parseInt(txtSSN.getText().trim()))) {
                // if new employee details are valid, then add new employee to DB
                String prepSQL = "INSERT INTO employeez (ssn, name, gender, phonenum, birthdate, job, salary, hospital_id, admissiondate) VALUES ("
                        + txtSSN.getText().trim() + ", "
                        + "'" + txtEname.getText().toUpperCase() + "', "
                        + "'" + gender + "', "
                        + "'" + txtPhoneno.getText().toUpperCase() + "', "
                        + "'" + ftxtBirthdate.getText().trim() + "',"
                        + "'" + txtJob.getText().toUpperCase() + "'," 
                        + txtSalary.getText() + ", "
                        + cmbHID.getSelectedItem().toString() + ", "
                        + "'" + ftxtHiredate.getText().trim() + "')";

                int result = dbCon.executePrepared(prepSQL);
                if (result > 0) {
                    if (equalIgnoreCase(txtJob.getText().trim(), "Doctor"))
                        (new AddDoctor()).setVisible(true);
                    else if (equalIgnoreCase(txtJob.getText().trim(), "IT"))
                        (new AddIT()).setVisible(true);
                    else if (equalIgnoreCase(txtJob.getText().trim(), "Secretary"))
                        (new AddSecretary()).setVisible(true);

                    javax.swing.JLabel label = new javax.swing.JLabel("New employee added successfully.");
                    label.setFont(new java.awt.Font("Arial", java.awt.Font.BOLD, 18));
                    JOptionPane.showMessageDialog(null, label, "SUCCESS", JOptionPane.INFORMATION_MESSAGE);
                    clearInputBoxes();
                } else {

                }

                rs.close();
            } else {
                if (!isDuplicate(Integer.parseInt(txtSSN.getText().trim()))) {
                    javax.swing.JLabel label = new javax.swing.JLabel("Please fix validation errors...");
                    label.setFont(new java.awt.Font("Arial", java.awt.Font.BOLD, 18));
                    JOptionPane.showMessageDialog(null, label, "ERROR", JOptionPane.ERROR_MESSAGE);
                } else {
                    javax.swing.JLabel label = new javax.swing.JLabel("SSN Already exists. Use a different SSN.");
                    label.setFont(new java.awt.Font("Arial", java.awt.Font.BOLD, 18));
                    JOptionPane.showMessageDialog(null, label, "ERROR", JOptionPane.INFORMATION_MESSAGE);
                    // check validation errors 
                }

            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, "Error adding new employee.");
        }
    }//GEN-LAST:event_btnAddNewEmpActionPerformed

    private void ftxtHiredateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ftxtHiredateActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ftxtHiredateActionPerformed

    private void txtSSNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtSSNActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtSSNActionPerformed

    private void cmbHIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbHIDActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cmbHIDActionPerformed

    private void ftxtBirthdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ftxtBirthdateActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ftxtBirthdateActionPerformed

    private void txtEnameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtEnameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtEnameActionPerformed

    private void txtSalaryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtSalaryActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtSalaryActionPerformed

    private void txtJobActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtJobActionPerformed
        // TODO add your handling code here:
        
    }//GEN-LAST:event_txtJobActionPerformed

    private void txtPhonenoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtPhonenoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtPhonenoActionPerformed

     public static boolean isValidDate(String inDate) {
    SimpleDateFormat dateFormat = new SimpleDateFormat("dd-MMM-yyyy");
    dateFormat.setLenient(false);
    try {
      dateFormat.parse(inDate.trim());
    } catch (ParseException pe) {
      return false;
    }
    return true;
    }
   
    public static boolean isValidPhoneNumber(String phone_number) {
		boolean isValid =  phone_number.matches("\\d{3}-\\d{3}-\\d{4}");
		System.out.println(phone_number+" : "+isValid);
                if(phone_number.isEmpty()) System.out.print("empty");
                return isValid;
    } 
     
   static boolean equalIgnoreCase(String str1, String str2)
{
    int i = 0;
 
    // length of first string
    int len1 = str1.length();
 
    // length of second string
    int len2 = str2.length();
 
    // if length is not same
    // simply return false since both string
    // can not be same if length is not equal
    if (len1 != len2)
        return false;
 
    // loop to match one by one
    // all characters of both string
    while (i < len1)
    {
 
        // if current characters of both string are same,
        // increase value of i to compare next character
        if (str1.charAt(i) == str2.charAt(i))
        {
            i++;
        }
 
        // if any character of first string
        // is some special character
        // or numeric character and
        // not same as corresponding character
        // of second string then return false
        else if (!((str1.charAt(i) >= 'a' && str1.charAt(i) <= 'z')
                || (str1.charAt(i) >= 'A' && str1.charAt(i) <= 'Z')))
        {
            return false;
        }
 
        // do the same for second string
        else if (!((str2.charAt(i) >= 'a' && str2.charAt(i) <= 'z')
                || (str2.charAt(i) >= 'A' && str2.charAt(i) <= 'Z')))
        {
            return false;
        }
 
        // this block of code will be executed
        // if characters of both strings
        // are of different cases
        else
        {
            // compare characters by ASCII value
            if (str1.charAt(i) >= 'a' && str1.charAt(i) <= 'z')
            {
                if (str1.charAt(i) - 32 != str2.charAt(i))
                    return false;
            }
 
            else if (str1.charAt(i) >= 'A' && str1.charAt(i) <= 'Z')
            {
                if (str1.charAt(i) + 32 != str2.charAt(i))
                    return false;
            }
 
            // if characters matched,
            // increase the value of i to compare next char
            i++;
 
        } // end of outer else block
 
    } // end of while loop
 
    // if all characters of the first string
    // are matched with corresponding
    // characters of the second string,
    // then return true
    return true;
 
}
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddNewEmp;
    private javax.swing.JComboBox<String> cmbGender;
    private javax.swing.JComboBox<String> cmbHID;
    private javax.swing.JFormattedTextField ftxtBirthdate;
    private javax.swing.JFormattedTextField ftxtHiredate;
    private javax.swing.JLabel jBirthDate;
    private javax.swing.JLabel jEname;
    private javax.swing.JLabel jH_ID;
    private javax.swing.JLabel jHireDate;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JLabel jSSN;
    private javax.swing.JLabel jSalary;
    private javax.swing.JLabel lblBirthdateError;
    private javax.swing.JLabel lblEnameError;
    private javax.swing.JLabel lblGenderError;
    private javax.swing.JLabel lblHIDError;
    private javax.swing.JLabel lblHireError;
    private javax.swing.JLabel lblJobError;
    private javax.swing.JLabel lblPhonenoError;
    private javax.swing.JLabel lblSSNError;
    private javax.swing.JLabel lblSalaryError;
    private javax.swing.JTextField txtEname;
    private javax.swing.JTextField txtJob;
    private javax.swing.JTextField txtPhoneno;
    public static javax.swing.JTextField txtSSN;
    private javax.swing.JTextField txtSalary;
    // End of variables declaration//GEN-END:variables
}
