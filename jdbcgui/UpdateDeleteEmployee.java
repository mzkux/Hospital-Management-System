package jdbcgui;

import java.awt.Container;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import static jdbcgui.AddEmployee.isValidPhoneNumber;
import static jdbcgui.UpdateDeleteIT.cmbField;
import static jdbcgui.UpdateDeleteDoctor.cmbQualification;
import static jdbcgui.UpdateDeleteDoctor.txtSpecialization;
import static jdbcgui.UpdateDeleteSecretary.txtTypingSpeed;
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author wissam
 */
public class UpdateDeleteEmployee extends javax.swing.JFrame {

    myDBCon dbCon;
    ResultSet rs;
    ResultSet rsdeptno;
    //JFrame frame = new JFrame();
    Container c;
    /**
     * Creates new form AddEmployee
     */
    public UpdateDeleteEmployee() {
        initComponents();
        
        // center form in screen 
        this.setLocationRelativeTo(null);
        
        // set all error labels to invisible
        cmbGender.addItem("MALE");
        cmbGender.addItem("FEMALE");
        lblSSNError.setVisible(false);
        lblEnameError.setVisible(false);
        lblJobError.setVisible(false);
        lblHireError.setVisible(false);
        lblPhonenoError.setVisible(false);
        lblSalaryError.setVisible(false);
        lblGenderError.setVisible(false);
        lblBirthdateError.setVisible(false);
        lblHIDError.setVisible(false);
        
        
        
        dbCon = new myDBCon();
        getNewData();
    }

    private void getNewData() {

        try {
            // populate hospital_id field
            rsdeptno = dbCon.executeStatement("SELECT ID FROM hospital ORDER BY ID ASC ");
//            rsdeptno = statement.executeQuery("SELECT deptno, dname FROM dept ORDER BY deptno ASC ");
            cmbHID.removeAllItems();
            while (rsdeptno.next()) {
                cmbHID.addItem(rsdeptno.getString("ID"));
            }

            // populate mgr field
//            rs = statement.executeQuery("SELECT empno, ename, job, mgr, hiredate, sal, comm, deptno FROM emp ORDER BY empno ASC ");
            
            //String statement = "SELECT ssn, name, gender, phonenum, birthdate, job, salary,TO_DATE( birthdate,'DD-MON-YY'),  TO_DATE(admissiondate,'DD-MON-YY') FROM employeez ORDER BY ssn ASC ";
            rs = dbCon.executeStatement("SELECT SSN, HOSPITAL_ID, NAME, GENDER, PHONENUM, TO_CHAR(BIRTHDATE,'DD-MON-YY'), JOB, SALARY, TO_CHAR(ADMISSIONDATE,'DD-MON-YY') FROM EMPLOYEEZ ORDER BY SSN ASC");

            // populate rest of fields
            rs.beforeFirst();
            rs.first();
            populateFields();
        } catch (SQLException e) {
            javax.swing.JLabel label = new javax.swing.JLabel("SQL Error - Display selected SSN.");
            label.setFont(new java.awt.Font("Arial", java.awt.Font.BOLD, 18));
            JOptionPane.showMessageDialog(null, label, "ERROR", JOptionPane.ERROR_MESSAGE);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        btnUpdate = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        btnNext = new javax.swing.JButton();
        btnPrevious = new javax.swing.JButton();
        jSSN = new javax.swing.JLabel();
        txtSSN = new javax.swing.JTextField();
        jEname = new javax.swing.JLabel();
        txtEname = new javax.swing.JTextField();
        lblEnameError = new javax.swing.JLabel();
        lblJobError = new javax.swing.JLabel();
        txtJob = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jH_ID = new javax.swing.JLabel();
        cmbHID = new javax.swing.JComboBox<>();
        lblHIDError = new javax.swing.JLabel();
        ftxtHiredate = new javax.swing.JFormattedTextField();
        jHireDate = new javax.swing.JLabel();
        lblHireError = new javax.swing.JLabel();
        lblBirthdateError = new javax.swing.JLabel();
        ftxtBirthdate = new javax.swing.JFormattedTextField();
        jBirthDate = new javax.swing.JLabel();
        jSalary = new javax.swing.JLabel();
        txtSalary = new javax.swing.JTextField();
        lblSalaryError = new javax.swing.JLabel();
        lblGenderError = new javax.swing.JLabel();
        cmbGender = new javax.swing.JComboBox<>();
        jLabel9 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        txtPhoneno = new javax.swing.JTextField();
        lblPhonenoError = new javax.swing.JLabel();
        lblSSNError = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Update/Delete Employee");
        setResizable(false);

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 36)); // NOI18N
        jLabel1.setText("Update/Delete Employee ");

        btnUpdate.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        btnUpdate.setText("Update");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        btnDelete.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        btnDelete.setText("Delete");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        btnNext.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        btnNext.setText("Next >>");
        btnNext.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNextActionPerformed(evt);
            }
        });

        btnPrevious.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        btnPrevious.setText("<< Previous");
        btnPrevious.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPreviousActionPerformed(evt);
            }
        });

        jSSN.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jSSN.setText("SSN:");

        txtSSN.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        txtSSN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtSSNActionPerformed(evt);
            }
        });

        jEname.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jEname.setText("ENAME:");

        txtEname.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        txtEname.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtEnameActionPerformed(evt);
            }
        });

        lblEnameError.setFont(new java.awt.Font("Tahoma", 2, 18)); // NOI18N
        lblEnameError.setForeground(new java.awt.Color(255, 0, 0));
        lblEnameError.setText("error label");

        lblJobError.setFont(new java.awt.Font("Tahoma", 2, 18)); // NOI18N
        lblJobError.setForeground(new java.awt.Color(255, 0, 0));
        lblJobError.setText("error label");

        txtJob.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        txtJob.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtJobActionPerformed(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel4.setText("JOB:");

        jH_ID.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jH_ID.setText("Hosipital ID:");

        cmbHID.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        cmbHID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbHIDActionPerformed(evt);
            }
        });

        lblHIDError.setFont(new java.awt.Font("Tahoma", 2, 18)); // NOI18N
        lblHIDError.setForeground(new java.awt.Color(255, 0, 0));
        lblHIDError.setText("error label");

        ftxtHiredate.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.DateFormatter(new java.text.SimpleDateFormat("dd-MMM-yyyy"))));
        ftxtHiredate.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        ftxtHiredate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ftxtHiredateActionPerformed(evt);
            }
        });

        jHireDate.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jHireDate.setText("Hire Date:");

        lblHireError.setFont(new java.awt.Font("Tahoma", 2, 18)); // NOI18N
        lblHireError.setForeground(new java.awt.Color(255, 0, 0));
        lblHireError.setText("error label");

        lblBirthdateError.setFont(new java.awt.Font("Tahoma", 2, 18)); // NOI18N
        lblBirthdateError.setForeground(new java.awt.Color(255, 0, 0));
        lblBirthdateError.setText("error label");

        ftxtBirthdate.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.DateFormatter(new java.text.SimpleDateFormat("dd-MMM-yyyy"))));
        ftxtBirthdate.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        ftxtBirthdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ftxtBirthdateActionPerformed(evt);
            }
        });

        jBirthDate.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jBirthDate.setText("Birth Date:");

        jSalary.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jSalary.setText("Salary:");

        txtSalary.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        txtSalary.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtSalaryActionPerformed(evt);
            }
        });

        lblSalaryError.setFont(new java.awt.Font("Tahoma", 2, 18)); // NOI18N
        lblSalaryError.setForeground(new java.awt.Color(255, 0, 0));
        lblSalaryError.setText("error label");

        lblGenderError.setFont(new java.awt.Font("Tahoma", 2, 18)); // NOI18N
        lblGenderError.setForeground(new java.awt.Color(255, 0, 0));
        lblGenderError.setText("error label");

        cmbGender.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N

        jLabel9.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel9.setText("Gender:");

        jLabel7.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel7.setText("Phone Number:");

        txtPhoneno.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        txtPhoneno.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtPhonenoActionPerformed(evt);
            }
        });

        lblPhonenoError.setFont(new java.awt.Font("Tahoma", 2, 18)); // NOI18N
        lblPhonenoError.setForeground(new java.awt.Color(255, 0, 0));
        lblPhonenoError.setText("error label");

        lblSSNError.setFont(new java.awt.Font("Tahoma", 2, 18)); // NOI18N
        lblSSNError.setForeground(new java.awt.Color(255, 0, 0));
        lblSSNError.setText("error label");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(149, 149, 149)
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(56, 56, 56)
                        .addComponent(btnPrevious)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnUpdate)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnDelete)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnNext)))
                .addContainerGap(144, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jSSN)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtSSN, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(lblSSNError, javax.swing.GroupLayout.PREFERRED_SIZE, 400, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(16, 16, 16))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(73, 73, 73)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(jEname)
                        .addComponent(jLabel4)
                        .addComponent(jH_ID)
                        .addComponent(jHireDate)
                        .addComponent(jSalary)
                        .addComponent(jLabel9)
                        .addComponent(jLabel7)
                        .addComponent(jBirthDate))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(cmbHID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(lblHIDError, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(ftxtBirthdate, javax.swing.GroupLayout.PREFERRED_SIZE, 206, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(lblBirthdateError, javax.swing.GroupLayout.DEFAULT_SIZE, 316, Short.MAX_VALUE))
                        .addGroup(layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(txtJob)
                                    .addComponent(txtEname, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 200, Short.MAX_VALUE)
                                    .addComponent(txtSalary, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 200, Short.MAX_VALUE)
                                    .addComponent(ftxtHiredate, javax.swing.GroupLayout.Alignment.LEADING))
                                .addComponent(txtPhoneno, javax.swing.GroupLayout.DEFAULT_SIZE, 210, Short.MAX_VALUE))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(lblSalaryError, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(layout.createSequentialGroup()
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(lblPhonenoError, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(lblHireError, javax.swing.GroupLayout.PREFERRED_SIZE, 286, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(lblJobError, javax.swing.GroupLayout.PREFERRED_SIZE, 312, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(lblEnameError, javax.swing.GroupLayout.PREFERRED_SIZE, 297, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGap(0, 0, Short.MAX_VALUE))))
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(cmbGender, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(lblGenderError, javax.swing.GroupLayout.PREFERRED_SIZE, 429, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addContainerGap()))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jSSN)
                    .addComponent(txtSSN, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblSSNError))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 302, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnUpdate)
                    .addComponent(btnDelete)
                    .addComponent(btnNext)
                    .addComponent(btnPrevious))
                .addGap(33, 33, 33))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(91, 91, 91)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jEname)
                        .addComponent(txtEname, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(lblEnameError))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel4)
                        .addComponent(lblJobError)
                        .addComponent(txtJob, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jH_ID)
                        .addComponent(cmbHID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(lblHIDError))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(lblHireError, javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jHireDate)
                            .addComponent(ftxtHiredate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jBirthDate)
                        .addComponent(ftxtBirthdate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(lblBirthdateError))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jSalary)
                        .addComponent(txtSalary, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(lblSalaryError))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jLabel9)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(cmbGender, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblGenderError)))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jLabel7)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblPhonenoError)
                            .addComponent(txtPhoneno, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addContainerGap(91, Short.MAX_VALUE)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void populateFields() {
        
        try {
            String gender;
            String s = rs.getString("GENDER");
            if (s.equals("M")) gender = "MALE";  
            else gender  = "FEMALE";  
            if(equalIgnoreCase(txtJob.getText().trim(), "Doctor") || equalIgnoreCase(txtJob.getText().trim(), "IT")|| equalIgnoreCase(txtJob.getText().trim(), "Secretary")){c.removeAll();
            c.setVisible(false);
            }
            txtSSN.setText(rs.getString("SSN"));
            txtEname.setText(rs.getString("NAME"));
            txtJob.setText(rs.getString("JOB"));
            txtSalary.setText(rs.getString("SALARY"));
            cmbGender.setSelectedItem(gender);
            txtPhoneno.setText(rs.getString("PHONENUM"));
            cmbHID.setSelectedItem(rs.getString("hospital_id"));
            ftxtHiredate.setText(rs.getString("TO_CHAR(ADMISSIONDATE,'DD-MON-YY')"));
            ftxtBirthdate.setText(rs.getString("TO_CHAR(BIRTHDATE,'DD-MON-YY')"));
            
            if (equalIgnoreCase(txtJob.getText().trim(), "Doctor")){
                c = (new UpdateDeleteDoctor());//.setVisible(true);
                c.setLocation(WIDTH, HEIGHT);
                c.setVisible(true);
            }
            else if (equalIgnoreCase(txtJob.getText().trim(), "IT")){
                c = (new UpdateDeleteIT());
                c.setLocation(WIDTH, HEIGHT);
                c.setVisible(true);
            }
            else if (equalIgnoreCase(txtJob.getText().trim(), "Secretary")){
                c = (new UpdateDeleteSecretary());
                c.setLocation(WIDTH, HEIGHT);
                c.setVisible(true);
            }
            EnableDisableButtons();
        } catch (SQLException ex) {
            Logger.getLogger(UpdateDeleteEmployee.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    private void MoveNext() {
        try {
            // TODO add your handling code here:
            if (!rs.isLast()) {
                rs.next();
                populateFields();
            }
        } catch (SQLException ex) {
            Logger.getLogger(UpdateDeleteEmployee.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    private void btnNextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNextActionPerformed
        
        MoveNext();
        
    }//GEN-LAST:event_btnNextActionPerformed

    private void MovePrevious() {
        try {
            // TODO add your handling code here:
            if (!rs.isFirst()) {
                rs.previous();
                populateFields();
            }
        } catch (SQLException ex) {
            Logger.getLogger(UpdateDeleteEmployee.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void EnableDisableButtons() {
        try {
            if (rs.isFirst()) {
                btnPrevious.setEnabled(false);
            } else {
                btnPrevious.setEnabled(true);
            }
            if (rs.isLast()) {
                btnNext.setEnabled(false);
            } else {
                btnNext.setEnabled(true);
            }
        } catch (SQLException ex) {
            Logger.getLogger(UpdateDeleteEmployee.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    private void btnPreviousActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPreviousActionPerformed
        // TODO add your handling code here:
        
        MovePrevious();
    }//GEN-LAST:event_btnPreviousActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        // TODO add your handling code here:
        try {
            // make the result set scrolable forward/backward updatable
            String prepSQL = "DELETE employeez WHERE ssn = " + txtSSN.getText().trim();
            
            // confirmation dialog
            if (JOptionPane.showConfirmDialog(null, "Are you sure you want to delete '" + txtEname.getText().trim() + "'?") != 0) {
                JOptionPane.showMessageDialog(null, "Cancelled deletion.");
                return;
            }
            if(equalIgnoreCase(txtJob.getText().trim(), "Doctor")) {
                dbCon.executeStatement("DELETE DOCTOR WHERE SSN = " + txtSSN.getText().trim());
            }
            else if (equalIgnoreCase(txtJob.getText().trim(), "IT")) {
                dbCon.executeStatement("DELETE IT WHERE SSN = " + txtSSN.getText().trim());
            }
            else if (equalIgnoreCase(txtJob.getText().trim(), "Secretary")){
                dbCon.executeStatement("DELETE Secretary WHERE SSN = " + txtSSN.getText().trim());
            }
            
            int result = dbCon.executePrepared(prepSQL);
            if (result > 0) {
                javax.swing.JLabel label = new javax.swing.JLabel("Employee No " + txtSSN.getText().trim() + " deleted successfully.");
                label.setFont(new java.awt.Font("Arial", java.awt.Font.BOLD, 18));
                JOptionPane.showMessageDialog(null, label, "SUCCESS", JOptionPane.INFORMATION_MESSAGE);
                getNewData();
            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, "Error deleting employee."+ e.getMessage());
        }
    }//GEN-LAST:event_btnDeleteActionPerformed

    void clearErrorLabels() {
        lblSSNError.setText("");
        lblSSNError.setVisible(false);
        lblEnameError.setText("");
        lblEnameError.setVisible(false);
        lblJobError.setText("");
        lblJobError.setVisible(false);
        lblHireError.setText("");
        lblHireError.setVisible(false);
        lblPhonenoError.setText("");
        lblPhonenoError.setVisible(false);
        lblSalaryError.setText("");
        lblSalaryError.setVisible(false);
        lblGenderError.setText("");
        lblGenderError.setVisible(false);
        lblBirthdateError.setText("");
        lblBirthdateError.setVisible(false);
    }

    public boolean isInteger(String s) {
        try {
            Integer.parseInt(s);
            return true;
        } catch (NumberFormatException ex) {
            return false;
        }
    }

    public boolean isDouble(String s) {
        try {
            Double.parseDouble(s);
            return true;
        } catch (NumberFormatException ex) {
            return false;
        }
    }

    boolean isValidData() {
        clearErrorLabels();
        boolean result = true; // assume all details are true, set to false if otherwise 
        // you need to check format deails and make sure they are consistent with DB 
        if (txtSSN.getText().trim().isEmpty() || !isInteger(txtSSN.getText().trim())) {
            if (txtSSN.getText().trim().isEmpty()) {
                lblSSNError.setText("Invalid. Cannot be empty.");
            } else if (!isInteger(txtSSN.getText().trim())) {
                lblSSNError.setText("Invalid. Must be integer.");
            }
            lblSSNError.setVisible(true);
            result = false;
        }

        if (txtEname.getText().trim().isEmpty() || (txtEname.getText().trim().length() > 30)) {
            if (txtEname.getText().trim().isEmpty()) {
                lblEnameError.setText("Invalid. Cannot be empty.");
            } else if ((txtEname.getText().trim().length() > 30)) {
                lblEnameError.setText("Invalid. Must be < 31 chars.");
            }
            lblEnameError.setVisible(true);
            result = false;
        }

        if (txtJob.getText().trim().isEmpty() || (txtJob.getText().trim().length() > 30)) {
            if (txtJob.getText().trim().isEmpty()) {
                lblJobError.setText("Invalid. Cannot be empty.");
            } else if (txtJob.getText().trim().length() > 30) {
                lblJobError.setText("Invalid. Must be < 31 chars.");
            }
            lblJobError.setVisible(true);
            result = false;
        }

        if (ftxtHiredate.getText().trim().isEmpty()) {
            lblHireError.setText("Invalid. Cannot be empty.");
            lblHireError.setVisible(true);
            result = false;
        }

        if (txtPhoneno.getText().trim().isEmpty()) {
            if (txtPhoneno.getText().trim().isEmpty()) {
                lblPhonenoError.setText("Invalid. Cannot be empty.");
            }
            lblPhonenoError.setVisible(true);
            result = false;
        }

        if (txtSalary.getText().trim().isEmpty() || !(isDouble(txtSalary.getText().trim()) || isInteger(txtSalary.getText().trim()))) {
            if (txtSalary.getText().trim().isEmpty()) {
                lblSalaryError.setText("Invalid. Cannot be empty.");
            } else if (!(isDouble(txtSalary.getText().trim()) || isInteger(txtSalary.getText().trim()))) {
                lblSalaryError.setText("Invalid. Must be double");
            }
            lblSalaryError.setVisible(true);
            result = false;
        }
        
        if(!isValidPhoneNumber(txtPhoneno.getText().trim())) {
            lblPhonenoError.setText("Form Should be xxx-xxx-xxxx");
            lblPhonenoError.setVisible(true);
            result = false;
        }
        return result;
    }

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        // TODO add your handling code here:

        try {
            // make the result set scrolable forward/backward updatable
//            statement = con.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_UPDATABLE);
            char gender;
            if (cmbGender.getSelectedItem().toString() == "MALE")
                gender = 'M';
            else
                gender = 'F';
            if (isValidData()) {
                String prepSQL = "UPDATE employeez SET name = " + 
                        "'" + txtEname.getText().trim().toUpperCase() + 
                        "', phonenum = '" + txtPhoneno.getText().trim().toUpperCase() + 
                        "', gender = '" + gender + 
                        "', birthdate = '" + ftxtBirthdate.getText() + 
                        "', salary = " + txtSalary.getText().trim() + 
                        ", hospital_id = " + cmbHID.getSelectedItem().toString() + 
                        ", admissiondate = '" + ftxtBirthdate.getText() + 
                        "' WHERE ssn = " + txtSSN.getText().trim();
                // confirmation dialog
                if (JOptionPane.showConfirmDialog(null, "Are you sure you want to delete '" + txtEname.getText().trim() + "'?") != 0) {
                    JOptionPane.showMessageDialog(null, "Cancelled Update.");
                    return;
                }
                
                if(equalIgnoreCase(txtJob.getText().trim(), "Doctor")) {
                    dbCon.executeStatement("UPDATE DOCTOR SET Specialization = " + 
                            "'" + txtSpecialization.getText().trim() + 
                            "', Qualification = '" + cmbQualification.getSelectedItem().toString() +  
                            "' WHERE SSN = " + txtSSN.getText().trim());
                }
                else if (equalIgnoreCase(txtJob.getText().trim(), "IT")) {
                    dbCon.executeStatement("UPDATE IT SET Field = " +  
                            "'" + cmbField.getSelectedItem().toString() +  
                            "' WHERE SSN = " + txtSSN.getText().trim());
                }
                else if (equalIgnoreCase(txtJob.getText().trim(), "Secretary")){
                    dbCon.executeStatement("UPDATE Secretary SET typingspeed = " +  
                            txtTypingSpeed.getText().trim() +  
                            "WHERE SSN = " + txtSSN.getText().trim());
                }
                
                int result = dbCon.executePrepared(prepSQL);
                if (result > 0) {

                    javax.swing.JLabel label = new javax.swing.JLabel("Employee No " + txtSSN.getText() + " updated successfully.");
                    label.setFont(new java.awt.Font("Arial", java.awt.Font.BOLD, 18));
                    JOptionPane.showMessageDialog(null, label, "SUCCESS", JOptionPane.INFORMATION_MESSAGE);

                    getNewData();

                } else {
                    // check validation errors 
                }
//                prepStatement.close();
            } else {
                javax.swing.JLabel label = new javax.swing.JLabel("Please fix validation errors...");
                label.setFont(new java.awt.Font("Arial", java.awt.Font.BOLD, 18));
                JOptionPane.showMessageDialog(null, label, "ERROR", JOptionPane.ERROR_MESSAGE);

            }

        } catch (SQLException e) {

            JOptionPane.showMessageDialog(null, "Error updating employee." + e.getMessage());

        }
    }//GEN-LAST:event_btnUpdateActionPerformed

    private void txtSSNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtSSNActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtSSNActionPerformed

    private void txtEnameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtEnameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtEnameActionPerformed

    private void txtJobActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtJobActionPerformed
        // TODO add your handling code here:

    }//GEN-LAST:event_txtJobActionPerformed

    private void cmbHIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbHIDActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cmbHIDActionPerformed

    private void ftxtHiredateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ftxtHiredateActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ftxtHiredateActionPerformed

    private void ftxtBirthdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ftxtBirthdateActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ftxtBirthdateActionPerformed

    private void txtSalaryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtSalaryActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtSalaryActionPerformed

    private void txtPhonenoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtPhonenoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtPhonenoActionPerformed

static boolean equalIgnoreCase(String str1, String str2)
{
    int i = 0;
 
    // length of first string
    int len1 = str1.length();
 
    // length of second string
    int len2 = str2.length();
 
    // if length is not same
    // simply return false since both string
    // can not be same if length is not equal
    if (len1 != len2)
        return false;
 
    // loop to match one by one
    // all characters of both string
    while (i < len1)
    {
 
        // if current characters of both string are same,
        // increase value of i to compare next character
        if (str1.charAt(i) == str2.charAt(i))
        {
            i++;
        }
 
        // if any character of first string
        // is some special character
        // or numeric character and
        // not same as corresponding character
        // of second string then return false
        else if (!((str1.charAt(i) >= 'a' && str1.charAt(i) <= 'z')
                || (str1.charAt(i) >= 'A' && str1.charAt(i) <= 'Z')))
        {
            return false;
        }
 
        // do the same for second string
        else if (!((str2.charAt(i) >= 'a' && str2.charAt(i) <= 'z')
                || (str2.charAt(i) >= 'A' && str2.charAt(i) <= 'Z')))
        {
            return false;
        }
 
        // this block of code will be executed
        // if characters of both strings
        // are of different cases
        else
        {
            // compare characters by ASCII value
            if (str1.charAt(i) >= 'a' && str1.charAt(i) <= 'z')
            {
                if (str1.charAt(i) - 32 != str2.charAt(i))
                    return false;
            }
 
            else if (str1.charAt(i) >= 'A' && str1.charAt(i) <= 'Z')
            {
                if (str1.charAt(i) + 32 != str2.charAt(i))
                    return false;
            }
 
            // if characters matched,
            // increase the value of i to compare next char
            i++;
 
        } // end of outer else block
 
    } // end of while loop
 
    // if all characters of the first string
    // are matched with corresponding
    // characters of the second string,
    // then return true
    return true;
 
}
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnNext;
    private javax.swing.JButton btnPrevious;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JComboBox<String> cmbGender;
    private javax.swing.JComboBox<String> cmbHID;
    private javax.swing.JFormattedTextField ftxtBirthdate;
    private javax.swing.JFormattedTextField ftxtHiredate;
    private javax.swing.JLabel jBirthDate;
    private javax.swing.JLabel jEname;
    private javax.swing.JLabel jH_ID;
    private javax.swing.JLabel jHireDate;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JLabel jSSN;
    private javax.swing.JLabel jSalary;
    private javax.swing.JLabel lblBirthdateError;
    private javax.swing.JLabel lblEnameError;
    private javax.swing.JLabel lblGenderError;
    private javax.swing.JLabel lblHIDError;
    private javax.swing.JLabel lblHireError;
    private javax.swing.JLabel lblJobError;
    private javax.swing.JLabel lblPhonenoError;
    private javax.swing.JLabel lblSSNError;
    private javax.swing.JLabel lblSalaryError;
    private javax.swing.JTextField txtEname;
    private javax.swing.JTextField txtJob;
    private javax.swing.JTextField txtPhoneno;
    public static javax.swing.JTextField txtSSN;
    private javax.swing.JTextField txtSalary;
    // End of variables declaration//GEN-END:variables
}
