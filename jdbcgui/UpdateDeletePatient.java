package jdbcgui;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author wissam
 */
public class UpdateDeletePatient extends javax.swing.JFrame {

    myDBCon dbCon;
    ResultSet rs;
    ResultSet rsdeptno;

    /**
     * Creates new form AddEmployee
     */
    public UpdateDeletePatient() {
        initComponents();
        
        // center form in screen 
        this.setLocationRelativeTo(null);
        
        // set all error labels to invisible
        lblErrorId.setVisible(false);
        lblErrorName.setVisible(false);
        lblErrorGender.setVisible(false);
        lblErrorPhone.setVisible(false);
        lblErrorBirthDate.setVisible(false);
        lblErrorHospitalID.setVisible(false);
        lblErrorDoctorSSN.setVisible(false);
        lblErrorAdmissionDate.setVisible(false);
        
        dbCon = new myDBCon();
        getNewData();
    }

    private void getNewData() {

        try {
            // populate gender combo box
            cmbGender.addItem("M");
            cmbGender.addItem("F");

            // populate doctor ssn combobox
            rs = dbCon.executeStatement("SELECT ssn FROM doctor ORDER BY ssn ASC");
            while (rs.next()) {
                cmbDoctorSSN.addItem(rs.getString("ssn"));
            }
            
            // populate hospital id combobox
            rs = dbCon.executeStatement("SELECT id FROM hospital ORDER BY id ASC");
            while (rs.next()) {
                cmbHospitalID.addItem(rs.getString("id"));
            }
            
            // put current date in admission date by default
            txtAdmissionDate.setText(getCurrentDate());

            // populate rest of fields
            //rs = dbCon.executeStatement("SELECT id, name, gender, phonenum, birthdate, hospital_id, doctor_ssn, admissiondate FROM patient ORDER BY id ASC ");
            rs = dbCon.executeStatement("SELECT id, name, gender, phonenum, TO_CHAR(birthdate, 'dd-Mon-yyyy') birthdate, hospital_id, doctor_ssn, TO_CHAR(admissiondate, 'dd-Mon-yyyy') admissiondate FROM patient ORDER BY id ASC ");
            
            rs.beforeFirst();
            rs.first();
            populateFields();
        } catch (SQLException e) {
            javax.swing.JLabel label = new javax.swing.JLabel("SQL Error - Display selected patient id.");
            label.setFont(new java.awt.Font("Arial", java.awt.Font.BOLD, 18));
            JOptionPane.showMessageDialog(null, label, "ERROR", JOptionPane.ERROR_MESSAGE);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        txtName = new javax.swing.JTextField();
        txtAdmissionDate = new javax.swing.JTextField();
        cmbGender = new javax.swing.JComboBox<>();
        cmbDoctorSSN = new javax.swing.JComboBox<>();
        btnUpdate = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        txtId = new javax.swing.JTextField();
        btnNext = new javax.swing.JButton();
        btnPrevious = new javax.swing.JButton();
        lblErrorId = new javax.swing.JLabel();
        lblErrorName = new javax.swing.JLabel();
        lblErrorGender = new javax.swing.JLabel();
        lblErrorBirthDate = new javax.swing.JLabel();
        lblErrorHospitalID = new javax.swing.JLabel();
        lblErrorDoctorSSN = new javax.swing.JLabel();
        lblErrorPhone = new javax.swing.JLabel();
        lblErrorAdmissionDate = new javax.swing.JLabel();
        cmbHospitalID = new javax.swing.JComboBox<>();
        txtPhoneNum = new javax.swing.JTextField();
        txtBirthDate = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Update/Delete Employee");
        setResizable(false);

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 36)); // NOI18N
        jLabel1.setText("Update/Delete Patient");

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel2.setText("ID:");

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel3.setText("Name:");

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel4.setText("Gender:");

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel5.setText("Phone:");

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel6.setText("Birth Date:");

        jLabel7.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel7.setText("Hospital ID:");

        jLabel8.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel8.setText("Doctor SSN");

        jLabel9.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel9.setText("Admission Date:");

        txtName.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N

        txtAdmissionDate.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N

        cmbGender.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N

        cmbDoctorSSN.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N

        btnUpdate.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        btnUpdate.setText("Update");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        btnDelete.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        btnDelete.setText("Delete");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        txtId.setEditable(false);
        txtId.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N

        btnNext.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        btnNext.setText("Next >>");
        btnNext.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNextActionPerformed(evt);
            }
        });

        btnPrevious.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        btnPrevious.setText("<< Previous");
        btnPrevious.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPreviousActionPerformed(evt);
            }
        });

        lblErrorId.setFont(new java.awt.Font("Tahoma", 2, 18)); // NOI18N
        lblErrorId.setForeground(new java.awt.Color(255, 0, 0));
        lblErrorId.setText("error label");

        lblErrorName.setFont(new java.awt.Font("Tahoma", 2, 18)); // NOI18N
        lblErrorName.setForeground(new java.awt.Color(255, 0, 0));
        lblErrorName.setText("error label");

        lblErrorGender.setFont(new java.awt.Font("Tahoma", 2, 18)); // NOI18N
        lblErrorGender.setForeground(new java.awt.Color(255, 0, 0));
        lblErrorGender.setText("error label");

        lblErrorBirthDate.setFont(new java.awt.Font("Tahoma", 2, 18)); // NOI18N
        lblErrorBirthDate.setForeground(new java.awt.Color(255, 0, 0));
        lblErrorBirthDate.setText("error label");

        lblErrorHospitalID.setFont(new java.awt.Font("Tahoma", 2, 18)); // NOI18N
        lblErrorHospitalID.setForeground(new java.awt.Color(255, 0, 0));
        lblErrorHospitalID.setText("error label");

        lblErrorDoctorSSN.setFont(new java.awt.Font("Tahoma", 2, 18)); // NOI18N
        lblErrorDoctorSSN.setForeground(new java.awt.Color(255, 0, 0));
        lblErrorDoctorSSN.setText("error label");

        lblErrorPhone.setFont(new java.awt.Font("Tahoma", 2, 18)); // NOI18N
        lblErrorPhone.setForeground(new java.awt.Color(255, 0, 0));
        lblErrorPhone.setText("error label");

        lblErrorAdmissionDate.setFont(new java.awt.Font("Tahoma", 2, 18)); // NOI18N
        lblErrorAdmissionDate.setForeground(new java.awt.Color(255, 0, 0));
        lblErrorAdmissionDate.setText("error label");

        cmbHospitalID.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N

        txtPhoneNum.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N

        txtBirthDate.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(149, 149, 149)
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(76, 76, 76)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel3)
                                    .addComponent(jLabel4)
                                    .addComponent(jLabel5)
                                    .addComponent(jLabel6)
                                    .addComponent(jLabel7)
                                    .addComponent(jLabel8)
                                    .addComponent(jLabel9)))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(btnPrevious, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.TRAILING))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(cmbHospitalID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lblErrorHospitalID, javax.swing.GroupLayout.DEFAULT_SIZE, 328, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnUpdate)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnDelete)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnNext))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(txtId)
                                    .addComponent(txtName, javax.swing.GroupLayout.DEFAULT_SIZE, 200, Short.MAX_VALUE)
                                    .addComponent(txtAdmissionDate, javax.swing.GroupLayout.DEFAULT_SIZE, 200, Short.MAX_VALUE)
                                    .addComponent(txtBirthDate)
                                    .addComponent(txtPhoneNum))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(lblErrorId, javax.swing.GroupLayout.DEFAULT_SIZE, 200, Short.MAX_VALUE)
                                    .addComponent(lblErrorName, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(lblErrorBirthDate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(lblErrorPhone, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(lblErrorAdmissionDate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(cmbDoctorSSN, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lblErrorDoctorSSN, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(cmbGender, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lblErrorGender, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(15, 15, 15)))
                .addGap(64, 64, 64))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel1)
                .addGap(40, 40, 40)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txtId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblErrorId))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(txtName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblErrorName))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(lblErrorGender)
                    .addComponent(cmbGender, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5)
                            .addComponent(lblErrorPhone))
                        .addGap(12, 12, 12))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(txtPhoneNum, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(lblErrorBirthDate)
                    .addComponent(txtBirthDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(lblErrorHospitalID)
                    .addComponent(cmbHospitalID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(6, 6, 6)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(lblErrorDoctorSSN)
                    .addComponent(cmbDoctorSSN, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel9)
                        .addComponent(txtAdmissionDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(lblErrorAdmissionDate))
                .addGap(21, 21, 21)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnUpdate)
                    .addComponent(btnDelete)
                    .addComponent(btnNext)
                    .addComponent(btnPrevious))
                .addGap(0, 48, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void populateFields() {
        try {
            txtId.setText(rs.getString("id"));
            txtName.setText(rs.getString("name"));
            cmbGender.setSelectedItem(rs.getString("gender"));
            txtPhoneNum.setText(rs.getString("phonenum"));
            txtBirthDate.setText(rs.getString("birthdate"));
            cmbHospitalID.setSelectedItem(rs.getString("hospital_id"));
            cmbDoctorSSN.setSelectedItem(rs.getString("doctor_ssn"));
            txtAdmissionDate.setText(rs.getString("admissiondate"));

            EnableDisableButtons();
        } catch (SQLException ex) {
            Logger.getLogger(UpdateDeletePatient.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void MoveNext() {
        try {
            // TODO add your handling code here:
            if (!rs.isLast()) {
                rs.next();
                populateFields();
            }
        } catch (SQLException ex) {
            Logger.getLogger(UpdateDeletePatient.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    private void btnNextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNextActionPerformed
        MoveNext();
    }//GEN-LAST:event_btnNextActionPerformed

    private void MovePrevious() {
        try {
            // TODO add your handling code here:
            if (!rs.isFirst()) {
                rs.previous();
                populateFields();
            }
        } catch (SQLException ex) {
            Logger.getLogger(UpdateDeletePatient.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void EnableDisableButtons() {
        try {
            if (rs.isFirst()) {
                btnPrevious.setEnabled(false);
            } else {
                btnPrevious.setEnabled(true);
            }
            if (rs.isLast()) {
                btnNext.setEnabled(false);
            } else {
                btnNext.setEnabled(true);
            }
        } catch (SQLException ex) {
            Logger.getLogger(UpdateDeletePatient.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    private void btnPreviousActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPreviousActionPerformed
        // TODO add your handling code here:
        MovePrevious();
    }//GEN-LAST:event_btnPreviousActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        // TODO add your handling code here:
        try {
            
            // testing ignore:
//            ResultSet testPatients = dbCon.executeStatement("SELECT id FROM patient WHERE hospital_id = '" + rs.getString("id") + "'");
//            if (testPatients.next()) {
//                JOptionPane.showMessageDialog(null, "Cannot delete a hospital with patients assigned to it.");
//                return;
//            }
//            testPatients.close();
            

            // TODO: DELETE the patient's entry in medicine & infect (UNCOMMENT, TEST)
//            String SQL_deleteTakes = "DELETE takes WHERE patient_id = '" + txtId.getText().trim() + "'";
//            int resultDeleteTakes = dbCon.executePrepared(SQL_deleteTakes);
//            
//            String SQL_deleteInfected = "DELETE infected_by WHERE patient_id = '" + txtId.getText().trim() + "'";
//            int resultDeleteInfected = dbCon.executePrepared(SQL_deleteInfected);
            
            
            String prepSQL = "DELETE patient WHERE id = '" + txtId.getText().trim() + "'";
            System.out.println("[DELETE Patient] " + prepSQL);
            
            // confirmation dialog
            if (JOptionPane.showConfirmDialog(null, "Are you sure you want to delete '" + txtName.getText().trim() + "'?") != 0) {
                JOptionPane.showMessageDialog(null, "Cancelled deletion.");
                return;
            } 
            
            int result = dbCon.executePrepared(prepSQL);
            if (result > 0) {
                javax.swing.JLabel label = new javax.swing.JLabel("Patient of Id " + txtId.getText().trim() + " deleted successfully.");
                label.setFont(new java.awt.Font("Arial", java.awt.Font.BOLD, 18));
                JOptionPane.showMessageDialog(null, label, "SUCCESS", JOptionPane.INFORMATION_MESSAGE);
                getNewData();
            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, "Error deleting patient.");
        }
    }//GEN-LAST:event_btnDeleteActionPerformed

    void clearErrorLabels() {
        lblErrorId.setText("");
        lblErrorId.setVisible(false);
        lblErrorName.setText("");
        lblErrorName.setVisible(false);
        lblErrorGender.setText("");
        lblErrorGender.setVisible(false);
        lblErrorPhone.setText("");
        lblErrorPhone.setVisible(false);
        lblErrorBirthDate.setText("");
        lblErrorBirthDate.setVisible(false);
        lblErrorHospitalID.setText("");
        lblErrorHospitalID.setVisible(false);
        lblErrorDoctorSSN.setText("");
        lblErrorDoctorSSN.setVisible(false);
        lblErrorAdmissionDate.setText("");
        lblErrorAdmissionDate.setVisible(false);
    }

    public boolean isInteger(String s) {
        try {
            Integer.parseInt(s);
            return true;
        } catch (NumberFormatException ex) {
            return false;
        }
    }

    public boolean isDouble(String s) {
        try {
            Double.parseDouble(s);
            return true;
        } catch (NumberFormatException ex) {
            return false;
        }
    }

    boolean isValidData() throws SQLException {
        clearErrorLabels();
        boolean result = true; 
        
        //String field_id = txtId.getText().trim();
        String field_name = txtName.getText().trim();
        //String field_gender = cmbGender.getSelectedItem().toString();
        String field_phonenum = txtPhoneNum.getText().trim();
        String field_birthdate = txtBirthDate.getText().trim();
        //String field_hospital_id = cmbHospitalID.getSelectedItem().toString();
        //String field_doctor_ssn = cmbDoctorSSN.getSelectedItem().toString();
        String field_admissiondate = txtAdmissionDate.getText().trim();
        
        
        if (field_name.length() > 30) {
            lblErrorName.setText("Cannot exceed 30 chars");
            lblErrorName.setVisible(true);
            result = false;
        }
        if (field_name.isEmpty()) {
            lblErrorName.setText("Cannot be empty");
            lblErrorName.setVisible(true);
            result = false;
        }
        
        if (field_phonenum.isEmpty()) {
            lblErrorPhone.setText("Cannot be empty");
            lblErrorPhone.setVisible(true);
            result = false;
        }
        if (field_phonenum.length() > 15) {
            lblErrorPhone.setText("Cannot exceed 15 chars");
            lblErrorPhone.setVisible(true);
            result = false;
        }
        if (!isValidPhoneNumber(field_phonenum)) {
            lblErrorPhone.setText("Format is ###-###-####");
            lblErrorPhone.setVisible(true);
            result = false;
        }
        
        if (!isValidDate(field_birthdate)) {
            lblErrorBirthDate.setText("Format must be dd-MMM-yyyy");
            lblErrorBirthDate.setVisible(true);
            result = false;
        }
        if (field_birthdate.isEmpty()) {
            lblErrorBirthDate.setText("Cannot be empty");
            lblErrorBirthDate.setVisible(true);
            result = false;
        }
        
        if (!isValidDate(field_admissiondate)) {
            lblErrorAdmissionDate.setText("Format must be dd-MMM-yyyy");
            lblErrorAdmissionDate.setVisible(true);
            result = false;
        }
        if (field_admissiondate.isEmpty()) {
            lblErrorAdmissionDate.setText("Cannot be empty");
            lblErrorAdmissionDate.setVisible(true);
            result = false;
        }

        return result;
    }

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        // TODO add your handling code here:

        try {
            // make the result set scrolable forward/backward updatable

            if (isValidData()) {
                String field_id = txtId.getText().trim();
                String field_name = txtName.getText().trim();
                String field_gender = cmbGender.getSelectedItem().toString();
                String field_phonenum = txtPhoneNum.getText().trim();
                String field_birthdate = txtBirthDate.getText().trim();
                String field_hospital_id = cmbHospitalID.getSelectedItem().toString();
                String field_doctor_ssn = cmbDoctorSSN.getSelectedItem().toString();
                String field_admissiondate = txtAdmissionDate.getText().trim();
                
                //  id, name, gender, phonenum, birthdate, hospital_id, doctor_ssn, admissiondate,
                
                String prepSQL = "UPDATE patient SET"
                        + " name = '" + field_name + "'"
                        + ", gender = '" + field_gender + "'"
                        + ", phonenum = '" + field_phonenum + "'"
                        + ", birthdate = '" + field_birthdate + "'"
                        + ", hospital_id = '" + field_hospital_id + "'"
                        + ", doctor_ssn = " + field_doctor_ssn + ""
                        + ", admissiondate = '" + field_admissiondate + "'"
                        + " WHERE id = " + field_id;
                
                System.out.println("[UPDATE Patient] " + prepSQL);
            
                // confirmation dialog
                if (JOptionPane.showConfirmDialog(null, "Are you sure you want to update this patient?") != 0) {
                    JOptionPane.showMessageDialog(null, "Cancelled update.");
                    return;
                } 
                
                int result = dbCon.executePrepared(prepSQL);
                if (result > 0) {
                    javax.swing.JLabel label = new javax.swing.JLabel("Patient of Id " + txtId.getText() + " updated successfully.");
                    label.setFont(new java.awt.Font("Arial", java.awt.Font.BOLD, 18));
                    JOptionPane.showMessageDialog(null, label, "SUCCESS", JOptionPane.INFORMATION_MESSAGE);

                    getNewData();
                }
            }

        } catch (SQLException e) {

            JOptionPane.showMessageDialog(null, "Error updating patient." + e.getMessage());

        }
    }//GEN-LAST:event_btnUpdateActionPerformed
    
    public static boolean isValidDate(String inDate) {
        SimpleDateFormat dateFormat = new SimpleDateFormat("dd-MMM-yyyy");
        dateFormat.setLenient(false);
        try {
            dateFormat.parse(inDate.trim());
        } catch (ParseException pe) {
            return false;
        }
        return true;
    }
    
    public static String getCurrentDate() {
        SimpleDateFormat dateFormat = new SimpleDateFormat("dd-MMM-yyyy");
        Calendar calendar = Calendar.getInstance();
        
        return dateFormat.format(calendar.getTime());
    }
    
    public static boolean isValidPhoneNumber(String phone_number) {
        return phone_number.matches("\\d{3}-\\d{3}-\\d{4}");
    } 

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnNext;
    private javax.swing.JButton btnPrevious;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JComboBox<String> cmbDoctorSSN;
    private javax.swing.JComboBox<String> cmbGender;
    private javax.swing.JComboBox<String> cmbHospitalID;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JLabel lblErrorAdmissionDate;
    private javax.swing.JLabel lblErrorBirthDate;
    private javax.swing.JLabel lblErrorDoctorSSN;
    private javax.swing.JLabel lblErrorGender;
    private javax.swing.JLabel lblErrorHospitalID;
    private javax.swing.JLabel lblErrorId;
    private javax.swing.JLabel lblErrorName;
    private javax.swing.JLabel lblErrorPhone;
    private javax.swing.JTextField txtAdmissionDate;
    private javax.swing.JTextField txtBirthDate;
    private javax.swing.JTextField txtId;
    private javax.swing.JTextField txtName;
    private javax.swing.JTextField txtPhoneNum;
    // End of variables declaration//GEN-END:variables
}
